/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./app/libs/js/myLib.js
;

(function () {
  // создаем глобальный объект
  window.myLib = {}; // Инициализируем переменную  body

  window.myLib.body = document.querySelector('body'); // Находим нужный аттрибут

  window.myLib.closestAttr = function (item, attr) {
    var node = item;

    while (node) {
      var attrValue = node.getAttribute(attr);

      if (attrValue) {
        return attrValue;
      }

      node = node.parentElement;
    }

    return null;
  };

  window.myLib.closestItemByClass = function (item, className) {
    var node = item;

    while (node) {
      if (node.classList.contains(className)) {
        return node;
      }

      node = node.parentElement;
    }

    return null;
  };

  window.myLib.toggleScroll = function () {
    myLib.body.classList.toggle('no-scroll');
  };
})();
;// CONCATENATED MODULE: ./app/libs/js/popup.js
;

(function () {
  var showPopup = function showPopup(target) {
    target.classList.add('is-active');
  };

  var closePopup = function closePopup(target) {
    target.classList.remove('is-active');
  };

  myLib.body.addEventListener('click', function (e) {
    var target = e.target;
    var popupClass = myLib.closestAttr(target, 'data-popup');

    if (popupClass === null) {
      return;
    }

    e.preventDefault();
    var popup = document.querySelector('.' + popupClass);

    if (popup) {
      showPopup(popup);
      myLib.toggleScroll();
    }
  });
  myLib.body.addEventListener('click', function (e) {
    var target = e.target;

    if (target.classList.contains('popup-close') || target.classList.contains('popup__inner')) {
      var popup = myLib.closestItemByClass(target, 'popup');
      closePopup(popup);
      myLib.toggleScroll();
    }
  });
  myLib.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== 27) {
      return;
    }

    var popup = document.querySelector('.popup.is-active');

    if (popup) {
      closePopup(popup);
      myLib.toggleScroll();
    }
  });
})();
;// CONCATENATED MODULE: ./app/js/app.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// // Import vendor jQuery plugin example
// import '~/app/libs/js/simple-adaptive-slider.min.js'


document.addEventListener('DOMContentLoaded', function () {
  /**
  * SimpleAdaptiveSlider by itchief v2.0.1 (https://github.com/itchief/ui-components/tree/master/simple-adaptive-slider)
  * Copyright 2020 - 2022 Alexander Maltsev
  * Licensed under MIT (https://github.com/itchief/ui-components/blob/master/LICENSE)
  */
  var ItcSimpleSlider = /*#__PURE__*/function () {
    function ItcSimpleSlider(target, config) {
      _classCallCheck(this, ItcSimpleSlider);

      this._el = typeof target === 'string' ? document.querySelector(target) : target;
      this._elWrapper = this._el.querySelector(ItcSimpleSlider.SELECTOR_WRAPPER);
      this._elItems = this._el.querySelector(ItcSimpleSlider.SELECTOR_ITEMS);
      this._elsItem = this._el.querySelectorAll(ItcSimpleSlider.SELECTOR_ITEM); // текущий индекс

      this._currentIndex = 0; // экстремальные значения слайдов

      this._minOrder = 0;
      this._maxOrder = 0;
      this._$itemWithMinOrder = null;
      this._$itemWithMaxOrder = null;
      this._minTranslate = 0;
      this._maxTranslate = 0; // направление смены слайдов (по умолчанию)

      this._direction = 'next'; // флаг, который показывает, что идёт процесс уравновешивания слайдов

      this._balancingItemsFlag = false; // текущее значение трансформации

      this._transform = 0;
      this._width = this._elWrapper.getBoundingClientRect().width;
      this._supportResizeObserver = typeof window.ResizeObserver !== 'undefined'; // swipe параметры

      this._hasSwipeState = false;
      this._swipeStartPosX = 0; // id таймера

      this._intervalId = null; // конфигурация слайдера (по умолчанию)

      var defaultConfig = {
        autoplay: false,
        loop: true,
        indicators: true,
        interval: 5000,
        swipe: true
      };
      this._config = Object.assign(defaultConfig, config);
      this._elItems.dataset.translate = 0; // добавляем к слайдам data-атрибуты

      this._elsItem.forEach(function (item, index) {
        item.dataset.order = index;
        item.dataset.index = index;
        item.dataset.translate = 0;
      }); // перемещаем последний слайд перед первым


      if (this._config.loop) {
        var count = this._elsItem.length - 1;
        var translate = -this._elsItem.length;
        this._elsItem[count].dataset.order = -1;
        this._elsItem[count].dataset.translate = -this._elsItem.length;
        var translateX = translate * this._width;
        this._elsItem[count].style.transform = "translateX(".concat(translateX, "px)");
      } // добавляем индикаторы к слайдеру


      this._addIndicators(); // обновляем экстремальные значения переменных


      this._refreshExtremeValues(); // помечаем активные элементы


      this._setActiveClass(); // назначаем обработчики


      this._addEventListener(); // запускаем автоматическую смену слайдов


      this._autoplay();
    }

    _createClass(ItcSimpleSlider, [{
      key: "_setActiveClass",
      value: function _setActiveClass() {
        var elActive = this._el.querySelector(ItcSimpleSlider.SELECTOR_ITEM_ACTIVE);

        elActive ? elActive.classList.remove(ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE) : null;

        var elActiveNew = this._el.querySelector("[data-index=\"".concat(this._currentIndex, "\"]"));

        elActiveNew ? elActiveNew.classList.add(ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE) : null;

        var elIndicatorActive = this._el.querySelector(ItcSimpleSlider.SELECTOR_INDICATOR_ACTIVE);

        elIndicatorActive ? elIndicatorActive.classList.remove(ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE) : null;

        var elIndicatorNew = this._el.querySelector("[data-slide-to=\"".concat(this._currentIndex, "\"]"));

        elIndicatorNew ? elIndicatorNew.classList.add(ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE) : null;

        var elPrevBtn = this._el.querySelector(ItcSimpleSlider.SELECTOR_CONTROL_PREV);

        var elNextBtn = this._el.querySelector(ItcSimpleSlider.SELECTOR_CONTROL_NEXT);

        elPrevBtn ? elPrevBtn.classList.add(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW) : null;
        elNextBtn ? elNextBtn.classList.add(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW) : null;

        if (!this._config.loop && this._currentIndex === 0) {
          elPrevBtn.classList.remove(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW);
        } else if (!this._config.loop && this._currentIndex === this._elsItem.length - 1) {
          elNextBtn.classList.remove(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW);
        }

        this._el.dispatchEvent(new CustomEvent('active.itc.slider', {
          bubbles: true
        }));
      } // смена слайдов

    }, {
      key: "_move",
      value: function _move(useTransition) {
        var translateX;

        this._elItems.classList.remove(ItcSimpleSlider.TRANSITION_NONE);

        if (useTransition === false) {
          this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE);
        }

        if (this._direction === 'none') {
          translateX = this._transform * this._width;
          this._elItems.style.transform = "translateX(".concat(translateX, "px)");
          return;
        }

        if (!this._config.loop) {
          var condition = this._currentIndex + 1 >= this._elsItem.length;

          if (condition && this._direction === 'next') {
            this._autoplay('stop');

            return;
          }

          if (this._currentIndex <= 0 && this._direction === 'prev') {
            return;
          }
        }

        var step = this._direction === 'next' ? -1 : 1;
        var transform = this._transform + step;

        if (this._direction === 'next') {
          if (++this._currentIndex > this._elsItem.length - 1) {
            this._currentIndex -= this._elsItem.length;
          }
        } else if (--this._currentIndex < 0) {
          this._currentIndex += this._elsItem.length;
        }

        this._transform = transform;
        this._elItems.dataset.translate = transform;
        translateX = transform * this._width;
        this._elItems.style.transform = "translateX(".concat(translateX, "px)");

        this._elItems.dispatchEvent(new CustomEvent('transition-start', {
          bubbles: true
        }));

        this._setActiveClass();
      } // функция для перемещения к слайду по индексу

    }, {
      key: "_moveTo",
      value: function _moveTo(index, useTransition) {
        var currentIndex = this._currentIndex;
        this._direction = index > currentIndex ? 'next' : 'prev';

        for (var i = 0; i < Math.abs(index - currentIndex); i++) {
          this._move(useTransition);
        }
      } // метод для автоматической смены слайдов

    }, {
      key: "_autoplay",
      value: function _autoplay(action) {
        var _this = this;

        if (!this._config.autoplay) {
          return;
        }

        if (action === 'stop') {
          clearInterval(this._intervalId);
          this._intervalId = null;
          return;
        }

        if (this._intervalId === null) {
          this._intervalId = setInterval(function () {
            _this._direction = 'next';

            _this._move();
          }, this._config.interval);
        }
      } // добавление индикаторов

    }, {
      key: "_addIndicators",
      value: function _addIndicators() {
        if (this._el.querySelector(ItcSimpleSlider.SELECTOR_INDICATORS) || !this._config.indicators) {
          return;
        }

        var html = '';

        for (var i = 0, length = this._elsItem.length; i < length; i++) {
          html += "<li class=\"".concat(ItcSimpleSlider.CLASS_NAME_INDICATOR, "\" data-slide-to=\"").concat(i, "\"></li>");
        }

        this._el.insertAdjacentHTML('beforeend', "<ol class=\"".concat(ItcSimpleSlider.CLASS_NAME_INDICATORS, "\">").concat(html, "</ol>"));
      } // refresh extreme values

    }, {
      key: "_refreshExtremeValues",
      value: function _refreshExtremeValues() {
        this._minOrder = parseInt(this._elsItem[0].dataset.order, 10);
        this._maxOrder = this._minOrder;
        this._$itemWithMinOrder = this._elsItem[0];
        this._$itemWithMaxOrder = this._$itemWithMinOrder;
        this._minTranslate = parseInt(this._elsItem[0].dataset.translate, 10);
        this._maxTranslate = this._minTranslate;

        for (var i = 0, length = this._elsItem.length; i < length; i++) {
          var $item = this._elsItem[i];
          var order = parseInt($item.dataset.order, 10);

          if (order < this._minOrder) {
            this._minOrder = order;
            this._$itemWithMinOrder = $item;
            this._minTranslate = parseInt($item.dataset.translate, 10);
          } else if (order > this._maxOrder) {
            this._maxOrder = order;
            this._$itemWithMaxOrder = $item;
            this._maxTranslate = parseInt($item.dataset.translate, 10);
          }
        }
      } // balancing items

    }, {
      key: "_balancingItems",
      value: function _balancingItems() {
        if (!this._balancingItemsFlag) {
          return;
        }

        var $wrapper = this._elWrapper;
        var wrapperRect = $wrapper.getBoundingClientRect();
        var halfWidthItem = wrapperRect.width / 2;
        var count = this._elsItem.length;
        var translate;
        var clientRect;
        var translateX;

        if (this._direction === 'next') {
          var wrapperLeft = wrapperRect.left;
          var $min = this._$itemWithMinOrder;
          translate = this._minTranslate;
          clientRect = $min.getBoundingClientRect();

          if (clientRect.right < wrapperLeft - halfWidthItem) {
            $min.dataset.order = this._minOrder + count;
            translate += count;
            $min.dataset.translate = translate;
            translateX = translate * this._width;
            $min.style.transform = "translateX(".concat(translateX, "px)");

            this._refreshExtremeValues();
          }
        } else if (this._direction === 'prev') {
          var wrapperRight = wrapperRect.right;
          var $max = this._$itemWithMaxOrder;
          translate = this._maxTranslate;
          clientRect = $max.getBoundingClientRect();

          if (clientRect.left > wrapperRight + halfWidthItem) {
            $max.dataset.order = this._maxOrder - count;
            translate -= count;
            $max.dataset.translate = translate;
            translateX = translate * this._width;
            $max.style.transform = "translateX(".concat(translateX, "px)");

            this._refreshExtremeValues();
          }
        }

        requestAnimationFrame(this._balancingItems.bind(this));
      } // adding listeners

    }, {
      key: "_addEventListener",
      value: function _addEventListener() {
        var $items = this._elItems;

        function onClick(e) {
          var $target = e.target;

          this._autoplay('stop');

          if ($target.classList.contains(ItcSimpleSlider.CLASS_NAME_CONTROL)) {
            e.preventDefault();
            this._direction = $target.dataset.slide;

            this._move();
          } else if ($target.dataset.slideTo) {
            e.preventDefault();
            var index = parseInt($target.dataset.slideTo, 10);

            this._moveTo(index);
          }

          if (this._config.loop) {
            this._autoplay();
          }
        }

        function onTransitionStart() {
          if (this._balancingItemsFlag) {
            return;
          }

          this._balancingItemsFlag = true;
          window.requestAnimationFrame(this._balancingItems.bind(this));
        }

        function onTransitionEnd() {
          this._balancingItemsFlag = false;

          this._el.dispatchEvent(new CustomEvent('transition-end', {
            bubbles: true
          }));
        }

        function onMouseEnter() {
          this._autoplay('stop');
        }

        function onMouseLeave() {
          if (this._config.loop) {
            this._autoplay();
          }
        }

        function onSwipeStart(e) {
          this._autoplay('stop');

          if (e.target.closest(".".concat(ItcSimpleSlider.CLASS_NAME_CONTROL))) {
            return;
          }

          var event = e.type.search('touch') === 0 ? e.touches[0] : e;
          this._swipeStartPosX = event.clientX;
          this._swipeStartPosY = event.clientY;
          this._hasSwipeState = true;
          this._hasSwiping = false;
        }

        function onSwipeMove(e) {
          if (!this._hasSwipeState) {
            return;
          }

          var event = e.type.search('touch') === 0 ? e.touches[0] : e;
          var diffPosX = this._swipeStartPosX - event.clientX;
          var diffPosY = this._swipeStartPosY - event.clientY;

          if (!this._hasSwiping) {
            if (Math.abs(diffPosY) > Math.abs(diffPosX) || Math.abs(diffPosX) === 0) {
              this._hasSwipeState = false;
              return;
            }

            this._hasSwiping = true;
          }

          e.preventDefault();

          if (!this._config.loop) {
            var isBeforeFirst = this._currentIndex + 1 >= this._elsItem.length && diffPosX >= 0;
            var isAfterLast = this._currentIndex <= 0 && diffPosX <= 0;

            if (isBeforeFirst || isAfterLast) {
              diffPosX /= 4;
            }
          }

          this._width = this._elWrapper.getBoundingClientRect().width;

          this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE);

          var translateX = this._transform * this._width - diffPosX;
          this._elItems.style.transform = "translateX(".concat(translateX, "px)");
        }

        function onSwipeEnd(e) {
          if (!this._hasSwipeState) {
            return;
          }

          var event = e.type.search('touch') === 0 ? e.changedTouches[0] : e;
          var diffPosX = this._swipeStartPosX - event.clientX;

          if (diffPosX === 0) {
            this._hasSwipeState = false;
            return;
          }

          if (!this._config.loop) {
            var isBeforeFirst = this._currentIndex + 1 >= this._elsItem.length && diffPosX >= 0;
            var isAfterLast = this._currentIndex <= 0 && diffPosX <= 0;

            if (isBeforeFirst || isAfterLast) {
              diffPosX = 0;
            }
          }

          var value = diffPosX / this._elWrapper.getBoundingClientRect().width * 100;

          this._elItems.classList.remove(ItcSimpleSlider.TRANSITION_NONE);

          if (value > ItcSimpleSlider.SWIPE_THRESHOLD) {
            this._direction = 'next';

            this._move();
          } else if (value < -ItcSimpleSlider.SWIPE_THRESHOLD) {
            this._direction = 'prev';

            this._move();
          } else {
            this._direction = 'none';

            this._move();
          }

          this._hasSwipeState = false;

          if (this._config.loop) {
            this._autoplay();
          }
        }

        function onDragStart(e) {
          e.preventDefault();
        }

        function onVisibilityChange() {
          if (document.visibilityState === 'hidden') {
            this._autoplay('stop');
          } else if (document.visibilityState === 'visible') {
            if (this._config.loop) {
              this._autoplay();
            }
          }
        } // click


        this._el.addEventListener('click', onClick.bind(this)); // transitionstart and transitionend


        if (this._config.loop) {
          $items.addEventListener('transition-start', onTransitionStart.bind(this));
          $items.addEventListener('transitionend', onTransitionEnd.bind(this));
        } // mouseenter and mouseleave


        if (this._config.autoplay) {
          this._el.addEventListener('mouseenter', onMouseEnter.bind(this));

          this._el.addEventListener('mouseleave', onMouseLeave.bind(this));
        } // swipe


        if (this._config.swipe) {
          var options = ItcSimpleSlider.checkSupportPassiveEvents() ? {
            passive: false
          } : false;

          this._el.addEventListener('touchstart', onSwipeStart.bind(this), options);

          this._el.addEventListener('touchmove', onSwipeMove.bind(this), options);

          this._el.addEventListener('mousedown', onSwipeStart.bind(this));

          this._el.addEventListener('mousemove', onSwipeMove.bind(this));

          document.addEventListener('touchend', onSwipeEnd.bind(this));
          document.addEventListener('mouseup', onSwipeEnd.bind(this));
          document.addEventListener('mouseout', onSwipeEnd.bind(this));
        }

        this._el.addEventListener('dragstart', onDragStart.bind(this)); // при изменении активности вкладки


        document.addEventListener('visibilitychange', onVisibilityChange.bind(this));

        function onResizeObserver(entries) {
          var contentBoxSize = entries[0].contentBoxSize;
          var contentRect = entries[0].contentRect;
          var newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
          var newTranslateX;

          if (this._width.toFixed(1) === newWidth.toFixed(1)) {
            return;
          }

          this._autoplay('stop');

          this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE);

          this._width = parseInt(newWidth.toFixed(1), 10);
          newTranslateX = newWidth * parseInt(this._elItems.dataset.translate, 10);
          this._elItems.style.transform = "translateX(".concat(newTranslateX, "px)");
          var $items2 = this._elsItem;

          for (var i = 0; i < $items2.length; i++) {
            var translateX = parseInt($items2[i].dataset.translate, 10);
            newTranslateX = translateX * newWidth;
            $items2[i].style.transform = "translateX(".concat(newTranslateX, "px)");
          }

          if (this._config.loop) {
            this._autoplay();
          }
        }

        if (this._supportResizeObserver) {
          var resizeObserver = new ResizeObserver(onResizeObserver.bind(this));
          resizeObserver.observe(this._elWrapper);
        }
      } // перейти к следующему слайду

    }, {
      key: "next",
      value: function next() {
        this._direction = 'next';

        this._move();
      } // перейти к предыдущему слайду

    }, {
      key: "prev",
      value: function prev() {
        this._direction = 'prev';

        this._move();
      } // управление автоматической сменой слайдов

    }, {
      key: "autoplay",
      value: function autoplay() {
        this._autoplay('stop');
      }
    }, {
      key: "moveTo",
      value: function moveTo(index, useTransition) {
        this._moveTo(index, useTransition);
      }
    }], [{
      key: "checkSupportPassiveEvents",
      value: // базовые классы и селекторы
      // порог для переключения слайда (20%)
      // класс для отключения transition
      // Определите, поддерживает ли текущий клиент пассивные события
      function checkSupportPassiveEvents() {
        var passiveSupported = false;

        try {
          var options = Object.defineProperty({}, 'passive', {
            get: function get() {
              passiveSupported = true;
            }
          });
          window.addEventListener('testPassiveListener', null, options);
          window.removeEventListener('testPassiveListener', null, options);
        } catch (error) {
          passiveSupported = false;
        }

        return passiveSupported;
      }
    }]);

    return ItcSimpleSlider;
  }();
  /*  */


  _defineProperty(ItcSimpleSlider, "PREFIX", 'itcss');

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_ITEM", "".concat(ItcSimpleSlider.PREFIX, "__item"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_ITEM_ACTIVE", "".concat(ItcSimpleSlider.PREFIX, "__item_active"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_ITEMS", "".concat(ItcSimpleSlider.PREFIX, "__items"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_INDICATOR", "".concat(ItcSimpleSlider.PREFIX, "__indicator"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_INDICATOR_ACTIVE", "".concat(ItcSimpleSlider.PREFIX, "__indicator_active"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_INDICATORS", "".concat(ItcSimpleSlider.PREFIX, "__indicators"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_CONTROL", "".concat(ItcSimpleSlider.PREFIX, "__control"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_CONTROL_PREV", "".concat(ItcSimpleSlider.PREFIX, "__control_prev"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_CONTROL_NEXT", "".concat(ItcSimpleSlider.PREFIX, "__control_next"));

  _defineProperty(ItcSimpleSlider, "CLASS_NAME_CONTROL_SHOW", "".concat(ItcSimpleSlider.PREFIX, "__control_show"));

  _defineProperty(ItcSimpleSlider, "SELECTOR_ITEMS", ".".concat(ItcSimpleSlider.CLASS_NAME_ITEMS));

  _defineProperty(ItcSimpleSlider, "SELECTOR_ITEM", ".".concat(ItcSimpleSlider.CLASS_NAME_ITEM));

  _defineProperty(ItcSimpleSlider, "SELECTOR_ITEM_ACTIVE", ".".concat(ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE));

  _defineProperty(ItcSimpleSlider, "SELECTOR_INDICATOR_ACTIVE", ".".concat(ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE));

  _defineProperty(ItcSimpleSlider, "SELECTOR_INDICATORS", ".".concat(ItcSimpleSlider.CLASS_NAME_INDICATORS));

  _defineProperty(ItcSimpleSlider, "SELECTOR_WRAPPER", ".".concat(ItcSimpleSlider.PREFIX, "__wrapper"));

  _defineProperty(ItcSimpleSlider, "SELECTOR_CONTROL", ".".concat(ItcSimpleSlider.CLASS_NAME_CONTROL));

  _defineProperty(ItcSimpleSlider, "SELECTOR_CONTROL_NEXT", ".".concat(ItcSimpleSlider.CLASS_NAME_CONTROL_NEXT));

  _defineProperty(ItcSimpleSlider, "SELECTOR_CONTROL_PREV", ".".concat(ItcSimpleSlider.CLASS_NAME_CONTROL_PREV));

  _defineProperty(ItcSimpleSlider, "SWIPE_THRESHOLD", 20);

  _defineProperty(ItcSimpleSlider, "TRANSITION_NONE", 'transition-none');

  if (document.querySelector('#slider_inner-page')) {
    new ItcSimpleSlider('#slider_inner-page', {
      autoplay: true,
      interval: 2000,
      swipe: true,
      indicators: true
    });
  } else {
    new ItcSimpleSlider('#slider_after_1440', {
      autoplay: true,
      interval: 2000,
      swipe: true,
      indicators: true
    });
    new ItcSimpleSlider('#slider_before_1440', {
      autoplay: true,
      interval: 2000,
      swipe: true,
      indicators: true
    });
  }
});
/******/ })()
;